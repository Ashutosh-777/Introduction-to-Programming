#include <iostream>
#include <vector>
using namespace std;
bool is_prime(int n) {
    if (n < 2)
        return false;
    for (int i = 2; i*i <= n; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

bool can_make_strictly_increasing(vector<int> A) {
    vector<int> primes;
    for (int i = 2; i <= *max_element(A.begin(), A.end()); i++) {
        if (is_prime(i))
            primes.push_back(i);
    }
    for (int i = 0; i < A.size(); i++) {
        bool found_prime = false;
        for (int j = 0; j < primes.size(); j++) {
            if (primes[j] > A[i])
                break;
            int new_a = A[i] - primes[j];
            if (i > 0 && new_a <= A[i-1])
                continue;
            if (new_a > A[i-1]) {
                found_prime = true;
                break;
            }
        }
        if (!is_prime)
            return false;
    }
    return true;
}

int main() {
    int n;
    cin >> n;
    vector<int> A(n);
    for (int i = 0; i < n; i++) {
        cin >> A[i];
    }
    if (can_make_strictly_increasing(A)) {
        cout << "YES\n";
    } else {
        cout << "NO\n";
    }
    return 0;
}
